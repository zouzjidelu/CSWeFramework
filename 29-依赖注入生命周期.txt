一、unity生命周期
进程模块---进程下有很多应用程序域---每个程序域下有很多dll----dll当中有一个静态变量，静态资源会在进程结束才会回收
---局部变量【分配到堆栈，代码块结束，回收】

unity生命周期

1.单例，内存中始终只有一个，所有人拿到的都是同一个对象，【ContainerControlldLifetimeManager】
   缓存起来
2.线程内唯一，每个线程解析一个对象【PerThreadLifetimeManager】使用场景，公共数据访问类，非静态，访问是多线程的。
  大家都用这个访问类，如果都同时用，就会出现并发问题。但是如果是线程内唯一。每个线程拿到的都是不一样的。
   这样提供数据库访问的性能。
   
3.多例，就是每次new都是新对象【TransieftLifetimeManager】

4.每个http请求构建一个实例【PerRequestLifetimeManager】，不是基于线程的，是基于请求的，解析的是通过一个实例
   每次请求的方法，得到当前用户信息
dbcontext不能用单例 。可以用多例，但是多例性能不太高，每个线程解析也不可行
每个http请求构建一个dbcontext实例，因为每个实例在某一秒的请求都是唯一的。
所以这个比较合理

二、更改unity.config配置信息，注入生命周期
<alias alias="别名" type="单例类型"; />
<lifetime type="生命周期类型"></lifetime>
把ef可以配置为每次http请求构建一个实例

三、权限 基于角色的权限的管理 rbac【Role-based access control】
mvc微软自带的权限太耦合，与ef强耦合。权限有100多个方法，

资源【层级关系】文件夹下文件夹....
角色【层级关系】
      员工，组长，经理，总裁，总监
权限记录【优先级】

用户管理----权限记录1-----员工组【user1,user2....】
订单管理----权限记录2-----员工组【user1,user2....】

mvc web可分配的资源
1.操作（Action，函数）
2.数据（order）



