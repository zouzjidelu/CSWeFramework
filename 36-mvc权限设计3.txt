1.在控制器中添加usercontroller、页面
2.做一个登陆界面
   如果在页面输入了想要进入的页面，但是没有登陆，跳转到登陆页面，
   如果登陆完成，应该自动跳转到想要进入的页面，而不是主页面
3.在user控制器的Login中接受一个 returnurl参数
   然后再传入到view中保存下来 ViewBag.ReturnUrl=returnUrl;
 4.Login方法应该是所有的人都能够访问，所以打上标签Allowanonymous
 5.添加一个视图 Login，接收LoginModel实体、returnurl
 6.在model文件夹下创建一个loginmodel.cs,属性有
   [DisplayName("用户名")]  
   public string UserName，
   [DisplayName("密码")]
   public string Password，
   [DisplayName("记住我")]
   public bool RememberMe[是否记住密码]

7.引用脚本，boostarp样式  @Styles.Render("/Content/css") 
   表单提交数据   
8.在User控制器中添加一个Loginaction，传入一个LoginModel，返回的url（returnurl），
   并标记POst请求，及允许访问的特性【AllowAnonymouse】、【ValidataAntiForgaryToken】，加上此特性验证非法提交
 a.如果用户中有一个用户名&密码一样，说明登陆成功，    
    登陆成功
    写cookie
    如果有returnurl就
         返回跳转 return  Redirect(returnUrl)
    否则就跳转到home /index
    
    如果没有登陆成功，就返回用户名密码不对， 
    MOdelState.AddModelError(string.empty,"无效的用户名密码");
 b.返回 loginmodel，

 c.在页面写表单提交的数据，
   @using(Html.BeginForm("Login","User",new{ReturnIrl=ViewBag.ReturnUrl},FormMethod.POst)){
   @HtmlAntiForgeryToken();//跟在loginaction上打击的token标签，在页面注入唯一编码，将编码返回给后台，mvc会自动验证判断
                                               发现相同的就是合法的。防止没加载页面，伪造请求，post数据，就会拦截，发现请求来源不是一个表单，解决安全问题

   
   }

bootcdn引用bootstarp的样式
推荐图标库
FontAwesome、 icons、glyphicon icon、
在登陆也引用用户名、密码的图标
然后输入账号密码提交后台，做验证

9.在Security文件夹  添加一个接口IAuthorizeProvider，//认证接口
  void SignIn(User user,bool rememberMe);//登陆（User 用户、bool 记住）
  void SignOut();
  User GetAuthorizeUser();

10.添加AuthorizeProvider类，实现IAuthorizeProvider接口
 

public  void SignIn(User user,bool rememberMe)
{
  
    string userData=Guid.NewGuid().ToString();
   //生成票据
    var ticket=new FormsAuthenticationTicket(1，user.Name,DateTime.Now,DateTime.Now.AddDays(1),rememberMe,userdata);//参数：版本，名字，当前时间，过期日期，记住密码，用户数据【userData】(唯一性)
  //加密票据
  string encryptedTicket=FormsAuthentication.Encypt(ticket);
  //写cookie
  var cookie=new HttpCookie(FormsAuthentication.FormsCookieName[微软默认的票据名称]，encryptedTicket){HttpOnly=true;//只读的，客户端不能更改};
  HttpContext.Current.Response.Cookies.Add(cookie);



}
public  void SignOut(){
 FormsAuthentication.SignOut();

}

public   User GetAuthorizeUser(){
HttpContext httpContext=HttpContext.Current;
//当前httpcontext不是空并且请求不是空，并且请求是认证过的。并且是Form认证种植的票据
if(httpContext!=null&&httpContext.Request!=null&&httpContext.Request.IsAuthenticated&&(httpContext.User.Identity is FormsIdentity))
 {
    FormsIdentity formIdentity=(FormsIdentity)httpcontext.User.Identity;
    string userName=formIdentity.Ticket.Name;
    string userData= formIdentity.Ticket.UserData;
   if(!string.IsNullOrWhiteSpace(userName)) {
   
     return db.Users.SingleOrDefault(u=>u.Name==userName);//这里应该还需要种植Id
    //可以将此信息放入缓存中，不用每次都来获取
    
  
   }
 }

return null;
}

11.在Login Post方法中使用IAuthorizeProvider
public actionresult login(LoginModel model,string returnurl){

IAuthorizeProvider authorizeProvider=new AuthorizeProvider();
//可以将LoginModel实体类映射成数据库的实体。通过mapper
 
 if(db.Users.Any(u=>u.Name==model.UserName&&u.Password=model.Password)){
  authorizeProvider.SiginIn(new User{Name=model.UserName;Password=model.Password},model.RemeberMe);
  if(!string.isnull(returnurl)) 
 	//跳转到指定的url
  }else{
	//跳转到home/index
  }

}


12.在_Layout.cshtml 上打印用户名、以及显示注销按钮，给注销按钮提供地址
httpcontext.User.Identity.Name;

会发现，打印不出来，因为mvc默认是windows认证。需要在webconfig中改成form表单验证
<system.web>
<authentication model="Forms">
   <forms loginUrl="/User/Login" slidingExpiration="true" ></..>//当用户没有登陆,自动跳转到user/login,滑动过期，
						  设置的cookie有效期如果设置的是1天，这次请求网站一次，
						  到明天的现在就会过期，按照最后一次请求时间，来计算过期时间
</...>
</system.web>

13.注销
调用权限提供者的注销功能
authorProvider.SignOut();
//抛出异常，没有权限，进行登陆
 throw new HttpException(HttpStatusCode.Unauthorized);
//401登陆
 return new HttpStatusCodeResult(401);

14.授权，权限服务
a.IPermissionService接口
    bool Authorize(string permissionName, User user);

    bool Authorize(string permissionName);

b. PermisssionService类
	//判断当前用户
	public bool Authorize(string permissionName)
	{
	     return	Authorize(PermissionName,WorkContext.CurrentUser);
	}
  	//判断其他用户    
       	 public bool Authorize(string permissionName, User user)
	{
	    return user.Roles.Where(role=>role.Active).Any(role=>role=>Authorize(permissionName,role));
		//可以做缓存处理
	}
	
	//验证权限
	protected virtual bool Authorize(string permisssionName,Role role){
		//可以做缓存处理
		role.permissions.Any(p=>p.Name.Equeals(permission,StringComparision.InvariantCultureIgnoreCase))
	}

15.创建工作上下文，可以看见当前用户，及其他东西【WorkContext】
  public static User CurrentUser
  { 
     get{
      return new AuthorizeProvider().GetAuthorize();
    }
  }

16.回到上节课 ActionAuthorizeAttribute，
 判断是否有权限

17.创建 ManagerController及视图 【只有登陆才能访问】
a.将此控制器在权限提供者中注入到权限列表中
b.如果此控制器下的所有aciton都需要验证，就在控制器上打上标记【ActionAuthorize】,表示此action参与验证

c.然后启动程序，访问Manager控制器会自动跳转到登录页，登陆完成
 会自动跳转到manager控制器，跳过来后，会发现报错误403，没有权限访问，
  需要在后台给此用户添加访问Manager的权限，就可以访问了

如果在manager页面中有通过异步ajax请求后台action，那么如果请求的此action需要进行授权，则打上跟哪个功能点有关，就
打上此功能点的控制器和action，如果不需要授权，直接在action上打上AllowAnonymous.



  

  
   















