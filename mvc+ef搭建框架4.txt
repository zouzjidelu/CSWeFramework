一、上节讲了第三方验证框架的引入，及实体与验证逻辑分开。验证提示可自定义，在验证类中加上WithMessage就可以写入自己的提示信息
问题：
    如果很多地方都需要写。岂不是很累赘？
    可以把提示信息封装替换 
操作步骤：
1.在web项目中。右键属性--资源-写入翻译后的键值信息，并设置访问修饰符为public，否则无效果
2.将验证资源模板引入到框架中。在ValidatorRegister验证注册器类中设置
   FluentValidationModelValidatorProvider.Configure();
   ValidatorOptions.ResourceProviderType=typeof(Resources);
3.carviewmodel实体类加邮箱属性，。并在验证类中加上验证邮箱合法性，可以给提示信息【WithMessage】，如果加了提示信息
  会优先使用这里的提示信息，没加，就会去找验证资源模板。故：在验证资源模板中加上邮箱的验证提示

4.CarViewModel类。属性中是否可以不打标签【DisplayName】。因为这里打上标签，以后做一个英文系统。会很麻烦
5.mvc的规则。会默认找displayname，所以要告诉mvc不从这里找。从资源中找。
故，要替换mvc的规则。

6.在web下创建一个mvc扩展文件夹，自定义一个元数据提供者类CustomModelMetadataProvider。继承微软的元数据提供者，重写元数据创建方法
  思路：
  1.首先把微软自己生成元数据保存起来
  2.判断元数据类型是否为空
  3.获取元数据名称key【命名空间+属性名+元数据的displayname（就是属性上打的标签）】
  4.在验证资源管理中根据这个key找到displayname
  5.判断是否为空，不为空，替换微软元数据的displayname
7.在(ExensionActivator)验证扩展激活器中，把（微软）当前的元数据提供者替换成自定义的元数据提供者。
8.在验证资源中。将车名、价格，邮箱设置一下中文。就可以在页面中看到效果
  以后实现其他语言的系统，翻译一套模板即可
  将资源copy一份改名为Resources-en-us.resx
  然后将配置信息改成英文的

9.在路由中的url可以配置一个语言的标致。根据zh-cn、 en-us 来识别不同的资源
  	url:"{lg}/{Controller/{action}}" 当请求过来判断lg，是什么语言文化版本

	  //routes.MapRoute(
            //    name: "Default",
            //    url: "{lg}/{controller}/{action}/{id}",
            //    defaults: new { lg="zh-cn", controller = "Car", action = "Index", id = UrlParameter.Optional }
            //);


  这里需要扩展一个mvc过滤器。LanuageActionFilter,并实现IActionFilter过滤器接口
  实现OnActionExecuting()方法；
  1.找到路由中的lg； string lg= filterContext.RouteData.Values["lg"].tostring();
  2.修改当前线程语言文化 
    Thread.CurrentThread.CurrentUICulture=new CultureInfo(lg);
    Thread.CurrentThread.CurrentCulture=new CultureInfo(lg);
     理解 CurrentCulture、CurrentUICulture资料：   https://www.cnblogs.com/Joans/archive/2012/08/13/2636131.html
    //当程序运行时，CurrentUICulture属性用来决定加载什么样的资源，而CurrentCulture属性用来决定诸如货币、数字和日期如何格式化。
    //1.CurrentCulture属性的默认值是操作系统的User Locale，我们可以在控制面板里设置。
    //2.CurrentUICulture属性的默认值是操作系统用户界面语言。


  3.在App_Start文件夹下有一个filterconfig配置，将这个过滤器加入即可
	filters.Add(new LanuageActionFilter());

  4.运行项目，通过更改lg来查看中英文切换

10.目前表单验证提示信息的属性和和元数据配置的不一样。应该和元数据名称一致。
   1.在验证器注册类中。
   2.生成key【type.name+memberinfo.name+"displayName"】
   3.通过key找到displayname。然后返回
   4.打开页面。提交表单验证信息提示应该和名字一样。无论中英文切换都会改变

总结：
1.在实体类与验证逻辑分开后，存在一个问题。页面提示信息，以及每个属性的[DisplayName]说明，是否可以动态化？不在程序中写死？
  拿Car来说。一般在程序中表单提交。会有一个文本框的[DisplayName]说明，比如 车名：<input type=text value=''/>,那么车名不能写死
  以及提示车名的信息应该跟着文本框说明来改变，比如车名不能为空，换成英文版的系统就是 carName:<input type=text value=''/>
  提示信息应该是Carname  Not is Null;以上知识点，就是围绕动态化提示来配置，操作的
2.具体步骤。
  a.在验证器注册器中，将mvc资源库模板引入。
  b.定义自定义元数据，在页面加载时，将判资源模板中是否有存在的资源，如果有，，没有，则使用微软自带的资源，并显示到页面上
     比如 车名在资源模板中有配置就显示车名，否则就用微软自带的（仔细观察了下，就是属性名）
  c.将属性的提示信息与属性的[DisplayName]说明保持一致，
  d.通过filter，在方法执行前，查找路由，根据路由的语言版本，显示不同的元数据。资源模板信息

3..好处：以后部署多语言，只需要资源库输copy一份出来，翻译一套其他语言的版本的资源库即可

二、数据实体自动映射。两个实体之间相互转换
1.在web项目中，安装包 Install-Package AutoMapper
2.既然用到容器需要与automapper进行解耦，将mapper注入到容器中
3.在web项目下的mvc扩展文件夹下，创建一个AutoMapperProfile，继承Profile【这里考虑分类，比如订单(OrderMapperProfile)，用户(UserMapperProfile)，产品，名字可以叫做不同的mapper】
  a.重写Configure方法
  b.创建map 
    this.CareMap<Car,CarViewModel>();
    this.CareMap<CarViewModel,car>();
  c.将mapper注入到容器中
4.创建AutoMapperREgister注册器类：实现IDependencyRegister
  a.程序第一次启动时，通过反射找到这个类型下的程序集的所有类型。条件是找到所有继承了Profile的类
  b.将符合条件的类型找到，通过反射的方式通过类型，创建对象，得到一个实例
  c.mapper总配置。将创建的实例循环添加到配置中
  d.向容器注册、
    1.将映射配置注册到容器中
    2.通过总配置创建一个Imapper，Impaer是一个单例的形式
5.在控制器构造函数中注入映射配置
  1.IMapper  mapper;;
  2.ImapperConfig mapperConfig;
  
  然后可以在aciton方法中通过 mapper.Map<CarViewModel,Car>(model);//第二个参数可以自己配置，名字不一样可以动态指定
  Index 、Create

问题：
页面除了表单语言化，但是其他的还没弄，比如title，按钮，等等都应该是中英文切换的方式

1.查看页面都是通过mvc模板生成的，需要扩展view（view本质是一个类），这里需要扩展
弹出自己的东西，比如@T，T传入一个值，现在是不行的
view下面有个webconfig，打开会发现 pages节点下面有一个pagebasetype，，是一个WebViewPage
如果扩展需要继承此类，扩展自己的东西
2.所有的扩展在mvc文件夹下，创建一个抽象类CustomViewPage,继承WebViewPage<TModel>(TModel展示的视图模型)
  并不是所有的都实现，所以是一个抽象类，部分使用自己的，其他的还是使用微软的
  2.1 创建一个T方法，传入一个参数key
  2.2 通过key，在资源模板中找到对应的值，展示到页面上
  2.3将view文件夹下的webconfig中的WebViewPage替换成自己写的自定义的CustomViewPage
  2.4 测试下，将title以及按钮替换成T("createbuttontext"); 
  2.5 在资源模板中 加createbuttontext的资源数据
  2.6 运行项目，查看效果
  2.7 页面其他地方也可以通过这种方式进行语言化。

 

三、权限
实体权限 Core类库Domain文件夹下的BaseEntity公共的id
菜单权限 
Action权限

创建、编辑权限
a用户有创建权限 
b用户有编辑权限
ab用户都是通过json的方式进行创建、编辑
  
  
  






  



