一、mvc+ef搭建框架1
    主要做了，框架的整体架构搭建。缓存引入【创建自己的config配置信息】，日志引入，
二、mvc+ef搭建框架2
    主要做了，ef的引入，数据库迁移，映射，引入untiy，将缓存，ef仓储，日志，业务层，依次注入到容器中
     以及在注入容器中需要用到的工具类实现，类型查找器，以及初始化默认数据
三、mvc+ef搭建框架3
    主要做了，t4模板引入，将系统默认的json替换成自己的，返回的json数据，首字母小写，以及时间类型的格式化
    第三方验证框架引入，实现实体类和验证类分离开来，互不影响，独立开来，在程序启动时，将mvc自带的验证框架
    替换成第三方验证框架，替换过程中需要一个untiy验证工厂类参数，
 （untiy验证工厂类的作用就是将所有实现了IValidator接口的实体验证器类进行解析【实体验证类(CarValidator)继承的AbstractValidator类，就是实现了IValidator，其实也就是找的实体验证类】)
四、mvc+ef搭建框架4
    针对上节的验证框架的引入，那么就需要验证信息统一。以及属性命与验证的提示信息中的属性要一致做了一系列的引入
    首先创建资源模板，将微软的资源模板，找到存入变量中，再找到自定义的资源模板中是否有验证的属性的模板信息，
    如果有则替换，没有则使用微软自带的。这些仅仅是针对表单，为了将页面标题，按钮的字样替换成在资源中配置的
    为了以后语言版本切换，都跟着切换。做了一个封装。在view文件夹下有个webconfig，在config中将webviewpage继承
     写入自己的逻辑。具体逻辑就是根据页面传入的key，找资源中是否有此模板，如果有直接返回，在页面展示
五、mvc+ef搭建框架5
      主要做了，异常处理、CDN静态文件引入（百度公共库）html模板引入，跨站攻击（CSRF、XXS）、
      主题模板（当输入的地址找不到，默认找到自己设置的主题模板）、mvc布局。html模板引入
      在view层做静态扩展、微软自带ajax异步操作html.BeginForm("");
六、mvc+ef搭建框架6
      webapi入门1 主要讲了webapi的 与efcode的结合使用、webapi模板的引入、webapi调用的四种方式post、put、delete、get
      、以及跨域问题、解决跨域的两种方式（jsonp、cors）、api文档生成、通过微软自己生成的pai文档  、以及第三方swagger插件的生成
       、webapi宿主在自己创建的服务器上、引入微软的宿主插件SelfHost、并重新建立一个仓库专门做知识点测试、练习的仓库。
      	