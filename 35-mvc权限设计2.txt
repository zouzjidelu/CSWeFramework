一、创建一个RoleController控制器、视图，展示所有角色列表

二、在Role控制器写一个授权action[Authorize]，传入当前授权的角色id，
//获得当前角色信息
 //获取所有权限，并根据类型将权限分组
 //循环权限组
 //将分组项添加到html select标签group下
//当前角色已经有的权限，在权限组中是否存在，存在就选中，将选中对象组成一个 SelectListItem，SelectListItem
集合
1.首先需要将角色查出来、将权限查出来，通过Category分类分组，得到一个groups
2.mvc提供了一个SelectListItem
List<SelectListItem> selectListItems=new ...();
遍历groups
SelectListGroup selectListGroup=new ....(){ 
Name=group.key };
selectListItems.AddRange(group.Select(g=>new SelectListItem{
   Group=selectListGroup,
   Selectd=role.Permissions.Any(rp=>rp.ID=g.ID),
   value=g.ID.tostring(),
  Text=g.Description
}));

return view(new SelectList(selectListItems));

3.找到当前角色已经有的权限，并且绑定到页面上。
将权限返回到页面上，让用户进行勾选。勾选完成，表单提交。，提交到后台，
接收角色id，选中的权限。然后将当前角色已经勾选的权限，但是数据库没有的
加入到角色的权限集合中，然后统一提交到数据库，保存即可
这些代码，每个人做法不一样，思路写在这里，具体怎么做。需要自己去实现


4.创建一个test控制器，
  a.写一个验证码的action【GetCode】
  b.写一个验证码的action【GetCode2】
  c.在GetCode、GetCode2上打Authorize("TextIndex")
  d。如果在控制器下的所有action都需要有权限访问，就在控制器上打此标签
       如果控制器下所有的action都有权限访问，但是某一个不能访问,就需要在此action上打Allow'A'nony..
  
5.在Security文件夹创建ActionAuthorizeAttribute类，继承微软的AuthorizeAttribute
   并，可以在class，方法上打此标签，不能继承，不可以打多个【在调试代码中，发现问题，调试了好久，手误，我写的是可以打多个标签，也就是true，
发现问题，在构造函数中，给PromissionNames数组赋值之后，执行OnAuthorization(AuthorizationContext filterContext)方法，会将数组值清空，
如果不允许打多个，也就是false，在构造函数中给数组赋值之后，再执行OnAuthorization(AuthorizationContext filterContext)，就不会清空，且，只要在控制器或者action上打了此标签，访问控制器或者action第一次会走构造函数，第二次访问就不会走构造函数了。有点跟静态构造函数一样的原理，不知道为什么，需要思考，】


如果有TextIndex、TestEdit,TestCreate这些权限，才可以访问，就在
控制器上标记

6.ActionAuthorizeAttribute类中写代码
 public string [] PromissionNames{get;private set;}

ctor(params string [] permissionNames){

this.PromissionNames=permissionNames??new string [0] ;
}

public override void OnAuthorization(AuthorizationContext filterContext)
{
if(filterContext=null){
抛异常
}
//当前请求的aciont上是否有匿名的特性，如果有就不验证
if(filtercontext.actiondescriptor.isdefined(typeof(allowannymouattribute),true))
return 
}


1.认证
2.授权
//没有认证
if(! filtercontext.httpcontext.user.identity.isauthenticatod){
HandleUnautorizeRequest(filtercontext);
return;
  }

string actionName=nfiltercontext.ActionDescriptor.Actioname;
string controllerName=filterContext.ActionDescriptor.ControllerDescriptor.ControllerName;
List<string> actionPermissionName=PermissionName.ToList();
//加上当前求的action是有权限的
 actionermissionName.Add(ControllerName+actionName);

//如果有任何一个权限有，就通过 
if(actionPermissionNames.Any()){
 return;
}
HandleUnautorizeRequest(filtercontext);

  }

ovveride void HandleUnautorizeRequest(...){
  //已经认证，没有权限、返回403
  if(filtercontext.httpcontext.request.isauthenticted){
            filtercontext.result=new httpstatuscoderesult((int)HttpStatusCode.Forbidden);//返回403，没有权限
  }else{
//没有认证
base.HandleUnauthorizedRequest(filtercontext);
}
}

7.在Action上打 ActionAuthorizeAttribute标签，标签中写入有权限的name,多个就传入一个字符串数组，即可


